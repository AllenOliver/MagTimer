{"version":3,"sources":["logo.svg","Components/Timer.js","Components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Timer","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","time","seconds","timer","startTimer","bind","assertThisInitialized","countDown","secs","divisor_for_minutes","divisor_for_seconds","h","Math","floor","m","s","ceil","timeLeftVar","secondsToTime","setState","setInterval","audio","Audio","play","clearInterval","react_default","a","createElement","className","onClick","React","Component","Navbar","href","src","width","height","alt","style","marginRight","selectImage","random","App","Components_Navbar","Components_Timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dbbdf384.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\n\r\nclass Timer extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = { time: {}, seconds: 210 };\r\n        this.timer = 0;\r\n        this.startTimer = this.startTimer.bind(this);\r\n        this.countDown = this.countDown.bind(this);\r\n    }\r\n\r\n    secondsToTime(secs) {\r\n        let hours = Math.floor(secs / (60 * 60));\r\n\r\n        let divisor_for_minutes = secs % (60 * 60);\r\n        let minutes = Math.floor(divisor_for_minutes / 60);\r\n\r\n        let divisor_for_seconds = divisor_for_minutes % 60;\r\n        let seconds = Math.ceil(divisor_for_seconds);\r\n\r\n        let obj = {\r\n            \"h\": hours,\r\n            \"m\": minutes,\r\n            \"s\": seconds\r\n        };\r\n        return obj;\r\n    }\r\n\r\n    componentDidMount() {\r\n        let timeLeftVar = this.secondsToTime(this.state.seconds);\r\n        this.setState({ time: timeLeftVar });\r\n    }\r\n\r\n    startTimer() {\r\n        if (this.timer == 0 && this.state.seconds > 0) {\r\n            this.timer = setInterval(this.countDown, 1000);\r\n        }\r\n        else {\r\n            this.setState({\r\n                time: this.secondsToTime(210),\r\n                //seconds: 5,\r\n            });\r\n            this.timer = setInterval(this.countDown, 1000);\r\n        }\r\n    }\r\n\r\n    countDown() {\r\n        // Remove one second, set state so a re-render happens.\r\n        let seconds = this.state.seconds - 1;\r\n        let audio = new Audio('/MagTime.wav')\r\n        this.setState({\r\n            time: this.secondsToTime(seconds),\r\n            seconds: seconds,\r\n        });\r\n\r\n        // Check if we're at zero.\r\n        if (seconds == 0) {\r\n\r\n            audio.play();\r\n            clearInterval(this.timer);\r\n            this.setState({\r\n                time: this.secondsToTime(seconds),\r\n                seconds: 210,\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div >\r\n            <div className=\"row\">\r\n                <h5>Minutes: {this.state.time.m} Seconds: {this.state.time.s}</h5>\r\n            </div>\r\n            <div className=\"row\">\r\n                <button className=\"btn btn-block btn-primary startButton\" onClick={this.startTimer}>Start</button>\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nexport default Timer;","import React from 'react';\r\nclass Navbar extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav className=\"navbar fixed-top navbar-dark bg-dark\">\r\n                    <a className=\"navbar-brand\" href=\"#\">\r\n                        <img src=\"./brand.jpg\" width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\" style={{marginRight: 12 + 'px'}} />\r\n                        Pso BB Mag Timer\r\n                    </a>\r\n                </nav>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Timer from './Components/Timer'\nimport Navbar from './Components/Navbar'\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <Navbar />\n        <div className=\"row\">\n          <div className=\"col col-lg-12\"><br/></div>\n        </div>\n        <div className=\"row text-center\">\n          <div className=\"col col-lg-3\"></div>\n          <div className=\"col col-lg-6 shadow p-3 mb-5 rounded darken \">\n            <header className=\"App-header\">\n              <img src={selectImage()} className=\"App-logo\" alt=\"logo\" />\n              <br/>\n              <span><Timer /></span>\n            </header>\n            <div className=\"col col-lg-3\"></div>\n          </div>\n          <div className=\"row\"></div>\n\n        </div>\n\n\n      </div>\n\n\n\n    </div>\n  );\n}\nfunction selectImage() {\n  const min = 1;\n  const max = 2;\n  const rand = Math.floor(Math.random() * max) + min;\n  switch(rand){\n    case(1):\n      return './HeaderImages/sato.gif';\n    case(2):\n      return './HeaderImages/mag.jpg';\n    default:\n        return './HeaderImages/sato.gif';\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}